//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::blog;
use crate::models::vo::categorie::Categorie;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Default)]
#[sea_orm(table_name = "category")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub category_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "blog::Entity")]
    Blog,
}

impl Related<super::blog::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blog.def()
    }
}

impl From<Categorie> for Model {
    fn from(c: Categorie) -> Self {
        Self {
            id: c.id.unwrap_or_default(),
            category_name: c.name,
            ..Default::default()
        }
    }
}
impl ActiveModelBehavior for ActiveModel {}
