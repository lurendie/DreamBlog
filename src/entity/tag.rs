//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Default)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub tag_name: String,
    pub color: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::blog::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_tag::Relation::Blog.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is CakeFilling -> Cake,
        // after `rev` it becomes Cake -> CakeFilling
        Some(super::blog_tag::Relation::Tag.def().rev())
    }
}

impl Model{
    pub fn _new(tag_name: String, color: Option<String>) -> Self {
        Self {
            id: 0,
            tag_name,
            color,
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
