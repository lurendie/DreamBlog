//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::model::{dto::moment_dto::MomentDTO, moment::Moment};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "moment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub content: String,
    pub create_time: DateTime,
    pub likes: Option<i32>,
    pub is_published: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<Moment> for Model{
    fn from(moment: Moment) -> Self {
        Self {
            id: moment.id.unwrap() as i64,
            content: moment.content,
            create_time: moment.create_time,
            likes: Some(moment.likes),
            is_published: moment.is_published,
        }
    }
}

impl From<MomentDTO> for Model{
    fn from(moment: MomentDTO) -> Self {
        Self {
            id: moment.id.unwrap_or_default(),
            content: moment.content,
            create_time: moment.create_time,
            likes: Some(moment.likes),
            is_published: moment.is_published,
        }
    }
}
