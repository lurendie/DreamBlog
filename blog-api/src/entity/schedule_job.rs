//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::model::ScheduleJob;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "schedule_job")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub job_id: i64,
    pub bean_name: Option<String>,
    pub method_name: Option<String>,
    pub params: Option<String>,
    pub cron: Option<String>,
    pub status: Option<bool>,
    pub remark: Option<String>,
    pub create_time: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<ScheduleJob> for Model {
    fn from(value: ScheduleJob) -> Self {
        Model {
            job_id: value.job_id.unwrap_or_default(),
            bean_name: value.bean_name,
            method_name: value.method_name,
            params: value.params,
            cron: value.cron,
            status: value.status,
            remark: value.remark,
            create_time: Some(value.create_time.unwrap_or_default()),
        }
    }
}
