//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use chrono::Local;
use sea_orm::entity::prelude::*;
use crate::model::BlogVO;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Default)]
#[sea_orm(table_name = "blog")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub title: String,
    pub first_picture: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub content: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub description: String,
    pub is_published: bool,
    pub is_recommend: bool,
    pub is_appreciation: bool,
    pub is_comment_enabled: bool,
    pub is_top: bool,
    pub create_time: DateTime,
    pub update_time: DateTime,
    pub views: i32,
    pub words: i32,
    pub read_time: i32,
    pub category_id: i64,
    pub password: Option<String>,
    pub user_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::category::Entity",
        from = "Column::CategoryId",
        to = "super::category::Column::Id"
    )]
    Category,
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_tag::Relation::Tag.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is CakeFilling -> Cake,
        // after `rev` it becomes Cake -> CakeFilling
        Some(super::blog_tag::Relation::Blog.def().rev())
    }
}

impl From<BlogVO> for Model {
    fn from(blog_vo: BlogVO) -> Self {
        Self {
            id: blog_vo.id.unwrap_or_default(),
            title: blog_vo.title,
            first_picture: blog_vo.first_picture,
            content: blog_vo.content,
            description: blog_vo.description,
            is_published: blog_vo.published,
            is_recommend: blog_vo.recommend,
            is_appreciation: blog_vo.appreciation,
            is_comment_enabled: blog_vo.comment_enabled,
            is_top: blog_vo.top,
            create_time: blog_vo.create_time.unwrap_or(Local::now().naive_local()),
            update_time: blog_vo.create_time.unwrap_or(Local::now().naive_local()),
            views: blog_vo.views,
            words: blog_vo.words,
            read_time: blog_vo.read_time,
            category_id: blog_vo.category_id,
            password: blog_vo.password,
            user_id: blog_vo.user_id,
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
