//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::model::CommentDTO;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub nickname: String,
    pub email: String,
    pub content: String,
    pub avatar: String,
    pub create_time: Option<DateTime>,
    pub ip: Option<String>,
    pub is_published: bool,
    pub is_admin_comment: bool,
    pub page: i8,
    pub is_notice: bool,
    pub blog_id: Option<i64>,
    pub parent_comment_id: i64,
    pub website: Option<String>,
    pub qq: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<CommentDTO> for Model {
    fn from(dto: CommentDTO) -> Self {
        Self {
            id: dto.id,
            nickname: dto.nickname,
            email: dto.email.unwrap_or_default(),
            content: dto.content,
            avatar: dto.avatar,
            is_published: dto.published.unwrap_or_default(),
            create_time: Some(dto.create_time),
            ip: dto.ip,
            is_notice: dto.is_notice.unwrap_or_default(),
            page: dto.page.unwrap_or_default(),
            blog_id: dto.blog_id_and_title.map(|b| b.id),
            parent_comment_id: 0,
            is_admin_comment: false,
            website: dto.website,
            qq: dto.qq,
        }
    }
}
